//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19324607
// Cuda compilation tools, release 7.0, V7.0.27
// Based on LLVM 3.4svn
//

.version 4.2
.target sm_50
.address_size 64

	// .weak	cudaMalloc
.visible .global .attribute(.managed) .align 8 .b8 sassi_references[262144];
.visible .global .attribute(.managed) .align 4 .u32 memIndex;
.global .align 1 .b8 $str[5] = {65, 84, 79, 77, 0};
.global .align 1 .b8 $str1[6] = {65, 84, 79, 77, 83, 0};
.global .align 1 .b8 $str2[4] = {66, 50, 82, 0};
.global .align 1 .b8 $str3[4] = {66, 65, 82, 0};
.global .align 1 .b8 $str4[4] = {66, 70, 69, 0};
.global .align 1 .b8 $str5[4] = {66, 70, 73, 0};
.global .align 1 .b8 $str6[4] = {66, 80, 84, 0};
.global .align 1 .b8 $str7[4] = {66, 82, 65, 0};
.global .align 1 .b8 $str8[4] = {66, 82, 75, 0};
.global .align 1 .b8 $str9[4] = {66, 82, 88, 0};
.global .align 1 .b8 $str10[4] = {67, 65, 76, 0};
.global .align 1 .b8 $str11[4] = {67, 65, 83, 0};
.global .align 1 .b8 $str12[5] = {67, 67, 84, 76, 0};
.global .align 1 .b8 $str13[6] = {67, 67, 84, 76, 76, 0};
.global .align 1 .b8 $str14[6] = {67, 67, 84, 76, 84, 0};
.global .align 1 .b8 $str15[5] = {67, 79, 78, 84, 0};
.global .align 1 .b8 $str16[5] = {67, 83, 50, 82, 0};
.global .align 1 .b8 $str17[5] = {67, 83, 69, 84, 0};
.global .align 1 .b8 $str18[6] = {67, 83, 69, 84, 80, 0};
.global .align 1 .b8 $str19[5] = {68, 65, 68, 68, 0};
.global .align 1 .b8 $str20[7] = {68, 69, 80, 66, 65, 82, 0};
.global .align 1 .b8 $str21[5] = {68, 70, 77, 65, 0};
.global .align 1 .b8 $str22[6] = {68, 77, 78, 77, 88, 0};
.global .align 1 .b8 $str23[5] = {68, 77, 85, 76, 0};
.global .align 1 .b8 $str24[5] = {68, 83, 69, 84, 0};
.global .align 1 .b8 $str25[6] = {68, 83, 69, 84, 80, 0};
.global .align 1 .b8 $str26[5] = {69, 88, 73, 84, 0};
.global .align 1 .b8 $str27[4] = {70, 50, 70, 0};
.global .align 1 .b8 $str28[4] = {70, 50, 73, 0};
.global .align 1 .b8 $str29[5] = {70, 65, 68, 68, 0};
.global .align 1 .b8 $str30[8] = {70, 65, 68, 68, 51, 50, 73, 0};
.global .align 1 .b8 $str31[5] = {70, 67, 72, 75, 0};
.global .align 1 .b8 $str32[5] = {70, 67, 77, 80, 0};
.global .align 1 .b8 $str33[5] = {70, 70, 77, 65, 0};
.global .align 1 .b8 $str34[8] = {70, 70, 77, 65, 51, 50, 73, 0};
.global .align 1 .b8 $str35[4] = {70, 76, 79, 0};
.global .align 1 .b8 $str36[6] = {70, 77, 78, 77, 88, 0};
.global .align 1 .b8 $str37[5] = {70, 77, 85, 76, 0};
.global .align 1 .b8 $str38[8] = {70, 77, 85, 76, 51, 50, 73, 0};
.global .align 1 .b8 $str39[5] = {70, 83, 69, 84, 0};
.global .align 1 .b8 $str40[6] = {70, 83, 69, 84, 80, 0};
.global .align 1 .b8 $str41[5] = {70, 83, 87, 90, 0};
.global .align 1 .b8 $str42[8] = {70, 83, 87, 90, 65, 68, 68, 0};
.global .align 1 .b8 $str43[4] = {73, 50, 70, 0};
.global .align 1 .b8 $str44[4] = {73, 50, 73, 0};
.global .align 1 .b8 $str45[5] = {73, 65, 68, 68, 0};
.global .align 1 .b8 $str46[6] = {73, 65, 68, 68, 51, 0};
.global .align 1 .b8 $str47[8] = {73, 65, 68, 68, 51, 50, 73, 0};
.global .align 1 .b8 $str48[5] = {73, 67, 77, 80, 0};
.global .align 1 .b8 $str49[5] = {73, 77, 65, 68, 0};
.global .align 1 .b8 $str50[8] = {73, 77, 65, 68, 51, 50, 73, 0};
.global .align 1 .b8 $str51[7] = {73, 77, 65, 68, 83, 80, 0};
.global .align 1 .b8 $str52[6] = {73, 77, 78, 77, 88, 0};
.global .align 1 .b8 $str53[5] = {73, 77, 85, 76, 0};
.global .align 1 .b8 $str54[8] = {73, 77, 85, 76, 51, 50, 73, 0};
.global .align 1 .b8 $str55[5] = {73, 83, 65, 68, 0};
.global .align 1 .b8 $str56[7] = {73, 83, 67, 65, 68, 68, 0};
.global .align 1 .b8 $str57[10] = {73, 83, 67, 65, 68, 68, 51, 50, 73, 0};
.global .align 1 .b8 $str58[5] = {73, 83, 69, 84, 0};
.global .align 1 .b8 $str59[6] = {73, 83, 69, 84, 80, 0};
.global .align 1 .b8 $str60[5] = {74, 67, 65, 76, 0};
.global .align 1 .b8 $str61[4] = {74, 77, 88, 0};
.global .align 1 .b8 $str62[3] = {76, 68, 0};
.global .align 1 .b8 $str63[4] = {76, 68, 67, 0};
.global .align 1 .b8 $str64[4] = {76, 68, 71, 0};
.global .align 1 .b8 $str65[4] = {76, 68, 76, 0};
.global .align 1 .b8 $str66[5] = {76, 68, 76, 75, 0};
.global .align 1 .b8 $str67[4] = {76, 68, 83, 0};
.global .align 1 .b8 $str68[6] = {76, 68, 83, 76, 75, 0};
.global .align 1 .b8 $str69[8] = {76, 68, 83, 95, 76, 68, 85, 0};
.global .align 1 .b8 $str70[4] = {76, 68, 85, 0};
.global .align 1 .b8 $str71[7] = {76, 68, 95, 76, 68, 85, 0};
.global .align 1 .b8 $str72[4] = {76, 69, 65, 0};
.global .align 1 .b8 $str73[5] = {76, 69, 80, 67, 0};
.global .align 1 .b8 $str74[8] = {76, 79, 78, 71, 74, 77, 80, 0};
.global .align 1 .b8 $str75[4] = {76, 79, 80, 0};
.global .align 1 .b8 $str76[5] = {76, 79, 80, 51, 0};
.global .align 1 .b8 $str77[7] = {76, 79, 80, 51, 50, 73, 0};
.global .align 1 .b8 $str78[7] = {77, 69, 77, 66, 65, 82, 0};
.global .align 1 .b8 $str79[4] = {77, 79, 86, 0};
.global .align 1 .b8 $str80[5] = {77, 85, 70, 85, 0};
.global .align 1 .b8 $str81[4] = {78, 79, 80, 0};
.global .align 1 .b8 $str82[4] = {80, 50, 82, 0};
.global .align 1 .b8 $str83[4] = {80, 66, 75, 0};
.global .align 1 .b8 $str84[5] = {80, 67, 78, 84, 0};
.global .align 1 .b8 $str85[6] = {80, 69, 88, 73, 84, 0};
.global .align 1 .b8 $str86[9] = {80, 76, 79, 78, 71, 74, 77, 80, 0};
.global .align 1 .b8 $str87[5] = {80, 79, 80, 67, 0};
.global .align 1 .b8 $str88[5] = {80, 82, 69, 84, 0};
.global .align 1 .b8 $str89[5] = {80, 82, 77, 84, 0};
.global .align 1 .b8 $str90[5] = {80, 83, 69, 84, 0};
.global .align 1 .b8 $str91[6] = {80, 83, 69, 84, 80, 0};
.global .align 1 .b8 $str92[4] = {82, 50, 66, 0};
.global .align 1 .b8 $str93[4] = {82, 50, 80, 0};
.global .align 1 .b8 $str94[4] = {82, 69, 68, 0};
.global .align 1 .b8 $str95[4] = {82, 69, 84, 0};
.global .align 1 .b8 $str96[4] = {82, 82, 79, 0};
.global .align 1 .b8 $str97[4] = {83, 50, 82, 0};
.global .align 1 .b8 $str98[4] = {83, 69, 76, 0};
.global .align 1 .b8 $str99[4] = {83, 72, 70, 0};
.global .align 1 .b8 $str100[5] = {83, 72, 70, 76, 0};
.global .align 1 .b8 $str101[4] = {83, 72, 76, 0};
.global .align 1 .b8 $str102[4] = {83, 72, 82, 0};
.global .align 1 .b8 $str103[4] = {83, 83, 89, 0};
.global .align 1 .b8 $str104[3] = {83, 84, 0};
.global .align 1 .b8 $str105[4] = {83, 84, 71, 0};
.global .align 1 .b8 $str106[4] = {83, 84, 76, 0};
.global .align 1 .b8 $str107[4] = {83, 84, 83, 0};
.global .align 1 .b8 $str108[7] = {83, 84, 83, 67, 85, 76, 0};
.global .align 1 .b8 $str109[6] = {83, 84, 83, 85, 76, 0};
.global .align 1 .b8 $str110[5] = {83, 84, 85, 76, 0};
.global .align 1 .b8 $str111[7] = {83, 85, 65, 84, 79, 77, 0};
.global .align 1 .b8 $str112[6] = {83, 85, 66, 70, 77, 0};
.global .align 1 .b8 $str113[8] = {83, 85, 67, 76, 65, 77, 80, 0};
.global .align 1 .b8 $str114[6] = {83, 85, 69, 65, 85, 0};
.global .align 1 .b8 $str115[5] = {83, 85, 76, 68, 0};
.global .align 1 .b8 $str116[7] = {83, 85, 76, 68, 71, 65, 0};
.global .align 1 .b8 $str117[6] = {83, 85, 76, 69, 65, 0};
.global .align 1 .b8 $str118[4] = {83, 85, 81, 0};
.global .align 1 .b8 $str119[6] = {83, 85, 82, 69, 68, 0};
.global .align 1 .b8 $str120[5] = {83, 85, 83, 84, 0};
.global .align 1 .b8 $str121[7] = {83, 85, 83, 84, 71, 65, 0};
.global .align 1 .b8 $str122[5] = {83, 89, 78, 67, 0};
.global .align 1 .b8 $str123[4] = {84, 69, 88, 0};
.global .align 1 .b8 $str124[10] = {84, 69, 88, 68, 69, 80, 66, 65, 82, 0};
.global .align 1 .b8 $str125[5] = {84, 69, 88, 83, 0};
.global .align 1 .b8 $str126[4] = {84, 76, 68, 0};
.global .align 1 .b8 $str127[5] = {84, 76, 68, 52, 0};
.global .align 1 .b8 $str128[6] = {84, 76, 68, 52, 83, 0};
.global .align 1 .b8 $str129[5] = {84, 76, 68, 83, 0};
.global .align 1 .b8 $str130[4] = {84, 88, 81, 0};
.global .align 1 .b8 $str131[9] = {85, 78, 77, 65, 80, 80, 69, 68, 0};
.global .align 1 .b8 $str132[13] = {85, 83, 69, 82, 95, 68, 69, 70, 73, 78, 69, 68, 0};
.global .align 1 .b8 $str133[6] = {86, 77, 78, 77, 88, 0};
.global .align 1 .b8 $str134[5] = {86, 79, 84, 69, 0};
.global .align 1 .b8 $str135[5] = {88, 77, 65, 68, 0};
.visible .global .attribute(.managed) .align 8 .u64 SASSIInstrOpcodeStrings[136] = {generic($str), generic($str1), generic($str2), generic($str3), generic($str4), generic($str5), generic($str6), generic($str7), generic($str8), generic($str9), generic($str10), generic($str11), generic($str12), generic($str13), generic($str14), generic($str15), generic($str16), generic($str17), generic($str18), generic($str19), generic($str20), generic($str21), generic($str22), generic($str23), generic($str24), generic($str25), generic($str26), generic($str27), generic($str28), generic($str29), generic($str30), generic($str31), generic($str32), generic($str33), generic($str34), generic($str35), generic($str36), generic($str37), generic($str38), generic($str39), generic($str40), generic($str41), generic($str42), generic($str43), generic($str44), generic($str45), generic($str46), generic($str47), generic($str48), generic($str49), generic($str50), generic($str51), generic($str52), generic($str53), generic($str54), generic($str55), generic($str56), generic($str57), generic($str58), generic($str59), generic($str60), generic($str61), generic($str62), generic($str63), generic($str64), generic($str65), generic($str66), generic($str67), generic($str68), generic($str69), generic($str70), generic($str71), generic($str72), generic($str73), generic($str74), generic($str75), generic($str76), generic($str77), generic($str78), generic($str79), generic($str80), generic($str81), generic($str82), generic($str83), generic($str84), generic($str85), generic($str86), generic($str87), generic($str88), generic($str89), generic($str90), generic($str91), generic($str92), generic($str93), generic($str94), generic($str95), generic($str96), generic($str97), generic($str98), generic($str99), generic($str100), generic($str101), generic($str102), generic($str103), generic($str104), generic($str105), generic($str106), generic($str107), generic($str108), generic($str109), generic($str110), generic($str111), generic($str112), generic($str113), generic($str114), generic($str115), generic($str116), generic($str117), generic($str118), generic($str119), generic($str120), generic($str121), generic($str122), generic($str123), generic($str124), generic($str125), generic($str126), generic($str127), generic($str128), generic($str129), generic($str130), generic($str131), generic($str132), generic($str133), generic($str134), generic($str135)};

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	.loc 2 66 3
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	.loc 2 71 3
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	.loc 2 76 3
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	.loc 2 81 3
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	.loc 2 86 3
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	.loc 2 91 3
	ret;
}

	// .globl	_Z10__isSharedPKv
.visible .func  (.param .b32 func_retval0) _Z10__isSharedPKv(
	.param .b64 _Z10__isSharedPKv_param_0
)
{
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_Z10__isSharedPKv_param_0];
	.loc 5 130 1
	// inline asm
	{ 
	    .reg .pred p; 
	    isspacep.shared p, %rd1; 
	    selp.u32 %r1, 1, 0, p;  
	} 
	
	// inline asm
	st.param.b32	[func_retval0+0], %r1;
	.loc 5 140 1
	ret;
}

	// .globl	_Z9__isLocalPKv
.visible .func  (.param .b32 func_retval0) _Z9__isLocalPKv(
	.param .b64 _Z9__isLocalPKv_param_0
)
{
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_Z9__isLocalPKv_param_0];
	.loc 5 152 1
	// inline asm
	{ 
	    .reg .pred p; 
	    isspacep.local p, %rd1; 
	    selp.u32 %r1, 1, 0, p;  
	} 
	
	// inline asm
	st.param.b32	[func_retval0+0], %r1;
	.loc 5 162 1
	ret;
}

	// .globl	_Z9__isConstPKv
.visible .func  (.param .b32 func_retval0) _Z9__isConstPKv(
	.param .b64 _Z9__isConstPKv_param_0
)
{
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_Z9__isConstPKv_param_0];
	.loc 5 174 1
	// inline asm
	{ 
	    .reg .pred p; 
	    isspacep.const p, %rd1; 
	    selp.u32 %r1, 1, 0, p;  
	} 
	
	// inline asm
	st.param.b32	[func_retval0+0], %r1;
	.loc 5 184 1
	ret;
}

	// .globl	_Z20sassi_before_handlerP17SASSIBeforeParamsP17SASSIMemoryParams
.visible .func _Z20sassi_before_handlerP17SASSIBeforeParamsP17SASSIMemoryParams(
	.param .b64 _Z20sassi_before_handlerP17SASSIBeforeParamsP17SASSIMemoryParams_param_0,
	.param .b64 _Z20sassi_before_handlerP17SASSIBeforeParamsP17SASSIMemoryParams_param_1
)
{
	.local .align 4 .b8 	__local_depot9[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<4>;
	.reg .s16 	%rs<4>;
	.reg .s32 	%r<52>;
	.reg .s64 	%rd<20>;


	mov.u64 	%rd19, __local_depot9;
	cvta.local.u64 	%SP, %rd19;
	ld.param.u64 	%rd3, [_Z20sassi_before_handlerP17SASSIBeforeParamsP17SASSIMemoryParams_param_0];
	ld.param.u64 	%rd2, [_Z20sassi_before_handlerP17SASSIBeforeParamsP17SASSIMemoryParams_param_1];
	.loc 1 39 1
	add.s64 	%rd1, %rd3, 16;
	ld.u8 	%rs1, [%rd3+16];
	setp.eq.s16	%p1, %rs1, 0;
	@%p1 bra 	BB9_3;

	.loc 1 41 8
	ld.u8 	%rs2, [%rd1+-15];
	and.b16  	%rs3, %rs2, 3;
	setp.eq.s16	%p2, %rs3, 0;
	@%p2 bra 	BB9_3;

	add.u64 	%rd6, %SP, 0;
	.loc 1 39 1
	cvta.to.local.u64 	%rd7, %rd6;
	.loc 1 42 1
	ld.u64 	%rd8, [%rd2];
	.loc 1 43 1
	and.b64  	%rd9, %rd8, -512;
	mov.u32 	%r2, 1;
	.loc 3 315 3
	// inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r2, 0; 
	vote.ballot.b32 	%r1, %p1; 
	}
	// inline asm
	.loc 1 44 63
	st.local.u32 	[%rd7], %r1;
	.loc 1 46 1
	// inline asm
	
 Loop:
	// inline asm
	.loc 1 47 1
	ld.local.u32 	%r3, [%rd7];
	// inline asm
	{
	.reg .pred p1; 
	setp.eq.s32 	p1, %r1, 0; 
	@p1 bra BB9_3;
	}
	
	// inline asm
	.loc 1 53 1
	ld.local.u32 	%r39, [%rd7];
	.loc 3 1498 10
	neg.s32 	%r40, %r39;
	and.b32  	%r41, %r39, %r40;
	clz.b32 	%r42, %r41;
	mov.u32 	%r35, 31;
	.loc 1 53 55
	sub.s32 	%r34, %r35, %r42;
	.loc 5 203 1
	cvt.u32.u64	%r43, %rd8;
	and.b32  	%r5, %r43, -512;
	.loc 4 102 1
	// inline asm
	shfl.idx.b32 %r4, %r5, %r34, %r35;
	// inline asm
	.loc 5 204 59
	cvt.u64.u32	%rd10, %r4;
	.loc 5 203 1
	shr.u64 	%rd11, %rd8, 32;
	cvt.u32.u64	%r9, %rd11;
	.loc 4 102 1
	// inline asm
	shfl.idx.b32 %r8, %r9, %r34, %r35;
	// inline asm
	.loc 5 204 59
	cvt.u64.u32	%rd12, %r8;
	shl.b64 	%rd13, %rd12, 32;
	or.b64  	%rd14, %rd10, %rd13;
	mov.u32 	%r33, 0;
	.loc 4 102 1
	// inline asm
	shfl.idx.b32 %r12, %r33, %r34, %r35;
	// inline asm
	// inline asm
	shfl.idx.b32 %r16, %r33, %r34, %r35;
	// inline asm
	// inline asm
	shfl.idx.b32 %r20, %r33, %r34, %r35;
	// inline asm
	// inline asm
	shfl.idx.b32 %r24, %r33, %r34, %r35;
	// inline asm
	// inline asm
	shfl.idx.b32 %r28, %r33, %r34, %r35;
	// inline asm
	// inline asm
	shfl.idx.b32 %r32, %r33, %r34, %r35;
	// inline asm
	.loc 1 55 1
	setp.eq.s64	%p3, %rd14, %rd9;
	selp.u32	%r37, 1, 0, %p3;
	.loc 3 315 3
	// inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r37, 0; 
	vote.ballot.b32 	%r36, %p1; 
	}
	// inline asm
	.loc 3 1498 10
	neg.s32 	%r44, %r36;
	and.b32  	%r45, %r36, %r44;
	clz.b32 	%r46, %r45;
	.loc 1 56 61
	sub.s32 	%r47, %r35, %r46;
	cvt.s64.s32	%rd4, %r47;
	.loc 5 117 1
	// inline asm
	mov.u32 %r38, %laneid;
	// inline asm
	.loc 1 57 63
	cvt.u64.u32	%rd5, %r38;
	.loc 1 59 1
	not.b32 	%r48, %r36;
	ld.local.u32 	%r49, [%rd7];
	and.b32  	%r50, %r49, %r48;
	st.local.u32 	[%rd7], %r50;
	.loc 1 60 1
	// inline asm
	{
	.reg .pred 	p4; 
	setp.eq.s64 	p4, %rd12, %rd11; 
	@!p4 bra 	Loop;
	}
	// inline asm
	.loc 3 1520 3
	mov.u64 	%rd15, memIndex;
	atom.global.add.u32 	%r51, [%rd15], 1;
	.loc 1 67 1
	mul.wide.u32 	%rd16, %r51, 8;
	mov.u64 	%rd17, sassi_references;
	add.s64 	%rd18, %rd17, %rd16;
	st.global.u64 	[%rd18], %rd9;

BB9_3:
	.loc 1 70 2
	ret;
}

	.file	1 "/home/kbaldauf/gpuMemoryTracking/sassi_instrumentor/memReferenceCoalesce.cu", 1524617174, 2656
	.file	2 "/usr/local/sassi7/include/cuda_device_runtime_api.h", 1524266470, 13858
	.file	3 "/usr/local/sassi7/include/device_functions.hpp", 1524266470, 136970
	.file	4 "/usr/local/sassi7/include/sm_30_intrinsics.hpp", 1524266470, 12733
	.file	5 "/home/kbaldauf/gpuMemoryTracking/sassi_instrumentor/./utils/sassi_intrinsics.h", 1524277294, 7393
	.file	6 "/usr/local/sassi7/include/sassi/sassi-core.hpp", 1459533435, 13220

